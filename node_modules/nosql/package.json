{
  "name": "nosql",
  "version": "1.0.3-1",
  "description": "NoSQL embedded database for small node.js projects (supports insert, update, remove, views, drop, stored)",
  "main": "./index.js",
  "keywords": [
    "nosql",
    "database",
    "embed",
    "embedded",
    "db",
    "binary"
  ],
  "engines": {
    "node": ">=0.8.0"
  },
  "readmeFilename": "readme.md",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/petersirka/nosql.git"
  },
  "author": {
    "name": "Peter Širka"
  },
  "readme": "[![NoSQL embedded database](http://partialjs.com/exports/nosql-logo.png)](https://github.com/petersirka/nosql)\n\nnode.js NoSQL embedded database\n===============================\n\n* __NEW:__ Supports stored functions\n* __NEW:__ Supports changelog (insert, update, remove, drop, create)\n* __NEW:__ Supports Binary files (insert, read, remove)\n* Written in JavaScript\n* Small and effective embedded database\n* Implements small concurrency model\n* Data are saved to one file as text file\n* Easy editing in e.g. notepad\n* Quick, simple, effective\n* Easy filtering of documents\n* Asynchronous insert, read, update, remove, drop, count, clear\n* Supports Views\n* __No dependencies__\n* [Documentation](http://www.partialjs.com/documentation/nosql/)\n* [News on Twitter - @partialjs](https://twitter.com/partialjs)\n* [E-shop via NoSQL embedded database](http://eshop.partialjs.com)\n* [Blog via NoSQL embedded database](http://blog.partialjs.com/)\n* Implemented in [partial.js / web application framework](http://www.partialjs.com)\n\n## Installation\n\n```\n$ sudo npm install -g nosql\n\n// or\n\n$ npm install nosql\n```\n\n## NEW: STORED FUNCTIONS\n\n> version +1.0.3-0\n\n```js\nvar nosql = require('nosql').load('/users/petersirka/desktop/database.nosql');\n\n// Create a new stored function\n// nosql.stored.create(name, function, [callback], [changes]);\nnosql.stored.create('counter', function(nosql, next, params) {\n\t\n\t// nosql === nosql embedded database object\n\n\tnosql.update(function(doc) {\n\t\tdoc.counter = (doc.counter || 0) + 1;\n\t\treturn doc;\n\t}, function() {\n\t\t// next calls callback function in nosql.stored.execute();\n\t\tnext();\n\t});\n\n}, 'insert new counter function');\n\n// Remove a stored function\n// nosql.stored.remove(name, [callback], [changes]);\nnosql.stored.remove('counter');\n\n// Remove all stored functions\n// nosql.stored.clear([callback]);\nnosql.stored.clear();\n\n// Execute a stored function\n// nosql.stored.execute(name, [params], [callback], [changes]);\nnosql.stored.execute('counter', function() {\n\tconsole.log('counter DONE.');\n});\n\n// or\n\nnosql.stored.execute('counter', { increment: 1 });\n\n```\n\n## NEW: CHANGELOG\n\n```js\nvar nosql = require('nosql').load('/users/petersirka/desktop/database.nosql');\n\nnosql.insert({ name: 'Peter' }, 'insert new user');\nnosql.update(..., 'update all users where age > 20');\n\nnosql.binary.insert(..., 'new user photo');\n```\n\n###\tChangelog: /users/petersirka/desktop/database.changes\n\n```plain\n2013-04-23 18:08:37 | insert new user\n2013-04-23 19:12:21 | update all users where age > 20\n2013-04-23 20:01:02 | new user photo\n```\n\n## node.js\n\n```js\n\nvar nosql = require('nosql').load('/users/petersirka/desktop/database.nosql', '/users/petersirka/desktop/binary-files-directory/');\n// nosq.load(filename, [path-to-binary-directory]);\n\n// INSERT DOCUMENT\n// nosql.insert(doc, [fnCallback], [changes]);\n// ============================================================================\n\nvar callback = function(count) {\n\t// optional\n};\n\nnosql.insert({ firstName: 'Peter', lastName: 'Širka', age: 28 }, callback, 'new registered user: Peter Širka');\nnosql.insert({ firstName: 'Fero', lastName: 'Samo', age: 40 }, callback);\nnosql.insert({ firstName: 'Juraj', lastName: 'Hundo', age: 28 }, callback);\n\n// BULK INSERT DOCUMENTS\n// nosql.insert(array, fnCallback);\n// ============================================================================\n\nvar callback = function(count) {\n\tconsole.log('INSERTED: ' + count);\n};\n\nnosql.insert([{ firstName: 'Peter', lastName: 'Širka', age: 28 }, { firstName: 'Fero', lastName: 'Samo', age: 40 }, { firstName: 'Juraj', lastName: 'Hundo', age: 28 }], callback);\n\n// UPDATE DOCUMENTS\n// nosql.update(fnUpdate, [fnCallback], [changes]);\n// ============================================================================\n\nvar callback = function(count) {\n\t// updated count\t\n};\n\nnosql.update(function(doc) {\n\t\n\tif (doc.name === 'Peter')\n\t\tdoc.name = 'Jano';\n\n\t// if return null or undefined - document will be removed\n\t// if return {Object}, document will be replaced\n\n\treturn doc;\n}, callback);\n\n// MULTIPLE UPDATE DOCUMENTS\n// nosql.prepare(fnUpdate, [fnCallback], [changes]);\n// nosql.update();\n// ============================================================================\n\nnosql.prepare(function(doc) {\n\tif (doc.name === 'Peter')\n\t\tdoc.name = 'Jano';\n\treturn doc;\n});\n\nnosql.prepare(function(doc) {\n\t\n\tif (doc.index === 2320)\n\t\tdoc.name = 'Peter';\n\n\t// if return null or undefined - document will be removed\n\t// if return {Object}, document will be replaced\n\n\treturn doc;\n});\n\nnosql.update();\n\n// READ DOCUMENTS\n// nosql.all(fnFilter, fnCallback, [itemSkip], [itemTake]);\n// nosql.one(fnFilter, fnCallback);\n// nosql.top(max, fnFilter, fnCallback);\n// nosql.each(fnCallback);\n// ----------------------------------------------------------------------------\n// IMPORTANT: SLOWLY AND RAM KILLER, USE VIEWS\n// nosql.sort(fnFilter, fnSort, fnCallback, [itemSkip], [itemTake]);\n// ============================================================================\n\nvar callback = function(selected) {\n\t\n\tvar users = [];\n\tselected.forEach(function(o) {\n\t\tusers.push(o.firstName + ' ' + o.lastName);\n\t});\n\n\t// how to sort?\n\t// use Array.sort() function\n\n\tconsole.log('Users between 25 and 35 years old: ' + users.join(', '));\n});\n\nvar filter = function(doc) {\n\treturn doc.age > 24 && doc.age < 36;\n};\n\nnosql.all(filter, callback);\nnosql.one(filter, function(doc) {});\nnosql.top(5, filter, callback);\nnosql.each(function(doc, offset) {});\n\n// FILTER can be a string\n// eval is bad, but sometimes is very helpful\n// ============================================================================\nnosql.all('doc.age > 24 && doc.age < 36');\n\n// REMOVE DOCUMENTS\n// nosql.remove(fnFilter, [fnCallback], [changes]);\n// ============================================================================\n\nvar callback = function(count) {\n\t// removed count\n});\n\nvar filter = function(doc) {\n\treturn doc.age > 24 && doc.age < 36;\n};\n\nnosql.remove(filter, callback);\n\n// VIEWS\n// nosql.view.all(name, fnCallback, [itemSkip], [itemTake], [fnFilter]);\n// nosql.view.one(name, [fnFilter], fnCallback);\n// nosql.view.top(name, top, fnCallback, [fnFilter]);\n// nosql.view.create(name, fnFilter, fnSort, [fnCallback], [fnUpdate], [changes]);\n// nosql.view.drop(name, [fnCallback], [changes]);\n// ============================================================================\n\nvar filter = function(doc) {\n\treturn doc.age > 20 && doc.age < 30;\n};\n\nvar sort = function(a, b) {\n\tif (a.age > b.age)\n\t\treturn 1;\n\treturn -1;\n};\n\nnosql.view.all('young', function(documents, count) {\n\t// view file not created\n\t// documents === empty\n}, 0, 10);\n\nnosql.view.create('young', filter, sort, function(count) {\t\n\t\n\t// view was created (database create new view file database#young.db with filtered and sorted documents)\n\n\tnosql.view.all('young', function(documents, count) {\n\t\tconsole.log(documents);\n\t\tconsole.log('From total ' + count + ' documents');\n\t}, 0, 10);\n\n\tnosql.view.top('young', 5, function(documents) {\n\t\tconsole.log(documents);\n\t});\n\n\tnosql.view.one('young', 'doc.age === 25', function(document) {\n\t\tconsole.log(document);\n\t});\n\n});\n\n// BINARY FILES\n// nosql.binary.insert(name, contentType, buffer/base64, [callback], [chnages]); - return file ID\n// nosql.binary.read(id, fnCallback);\n// nosql.binary.remove(id, [fnCallback], [changes]);\n// ============================================================================\n\nfs.readFile('/users/petersirka/desktop/picture.jpg', function(err, data) {\n\n\t// sync function\n\tvar id = nosql.binary.insert('picture.jpg', 'image/jpeg', data);\n\n\tconsole.log(id);\n\n\t// result: database#1365699379204dab2csor\n\t// nosql.binary.read(id, .......);\n\n});\n\nnosql.binary.read('database#1365699379204dab2csor', function(err, stream, header) {\n\t\n\tif (err)\n\t\treturn;\n\n\t// header.name; - file name\n\t// header.size; - file size\n\t// header.type; - content type\n\n\tstream.pipe(fs.createWriteStream('/users/petersirka/dekstop/picture-database.jpg'));\n\t\n\t// or\n\t\n\tstream.pipe(httpResponse);\n});\n\nnosql.binary.remove('database#1365699379204dab2csor', function(isRemoved) {\n\tconsole.log(isRemoved === true);\n});\n\n\n// OTHERS\n// ============================================================================\n\n// Pause or Resume database operations\nnosql.pause();\nnosql.resume();\n\n// Drop database\n// nosql.drop([fnCallback]);\n\n// Clear / Truncate database\n// nosql.clear([fnCallback]);\n\n// EVENTS\n// ============================================================================\n\nnosql.on('error', function(err, source) {});\nnosql.on('pause/resume', function(pause) {});\nnosql.on('insert', function(begin, count) {});\nnosql.on('update/remove', function(countUpdate, countRemove) {});\nnosql.on('all', function(begin, count) {});\nnosql.on('one', function(begin, count) {});\nnosql.on('top', function(begin, count) {});\nnosql.on('each', function(begin, count) {});\nnosql.on('view', function(begin, name, count) {});\nnosql.on('view/create', function(begin, name, count) {});\nnosql.on('view/drop', function(begin, name) {});\nnosql.on('clear', function(begin, success) {});\nnosql.on('drop', function(begin, success) {});\nnosql.on('complete', function(old_status) {});\nnosql.on('change', function(description) {});\nnosql.on('stored', function(name) {});\nnosql.on('stored/load', function() {});\nnosql.on('stored/clear', function() {});\nnosql.on('stored/save', function(name) {});\n\n```\n\n## Changelog\n\n> version +1.0.2-0\n\n```js\n\n// INSERT\nnosql.changelog.insert('my change');\nnosql.changelog.insert(['my change 1', 'my change 2', 'my change 3']);\n\n// CLEAR CHANGELOG\nnosql.changelog.clear([fnCallback]);\n\n// READ CHANGELOG\nnosql.changelog.read(function(lines) {\n\tconsole.log(lines.join('\\n'));\n});\n\n```\n\n## Tips\n\n```js\n\n// ============================================================================\n// How to create live view?\n// ============================================================================\n\nfunction addUser() {\n\t// ...\n\t// ...\n\tnosql.insert(user, function() {\n\n\t\t// refresh view\n\t\tnosql.view.create('user', yourGlobalUser.filter, yourGlobalUser.sort);\n\n\t});\n}\n\n// ============================================================================\n// How to summarize prices?\n// ============================================================================\n\nfunction sumarize() {\n\t// ...\n\t// ...\n\n\tvar sum = 0;\n\tnosql.each(function(doc) {\n\n\t\tif (doc.type === 'product')\n\t\t\tsum += doc.price;\n\n\t}, function() {\n\t\tconsole.log('Price of all products:', sum);\n\t});\n}\n\n// ============================================================================\n// How to get documents count?\n// ============================================================================\n\nnosql.count('user.age > 10 && user.age < 30', function(count) {\n\tconsole.log('Count of users between 10 and 30 years old:', count);\n});\n\n// ============================================================================\n// How to paging documents?\n// ============================================================================\n\n// TIP: create a view\n\nvar userSkip = 10;\nvar userTake = 30;\n\nnosql.view.all('users', function(users, count) {\t\n\t\n\tconsole.log(users);\n\n\tvar pageCount = count / userTake;\n\n\tif (pageCount % userTake !== 0)\n\t\tpageCount++;\n\n\tconsole.log('Total pages:', pageCount);\n\tconsole.log('Total users:', count);\n\n}, userSkip, userTake);\n\n// or filtering in view\n\nnosql.view.all('users', function(users, count) {\t\n\tconsole.log(users);\n\tconsole.log('Total users:', count);\n}, userSkip, userTake, 'user.age > 10 && user.age < 30');\n\n// Without view:\n\nnosql.all('user.age > 10 && user.age < 30', function(users) {\t\n\tconsole.log(users);\n}, userSkip, userTake);\n\n// Without view (sorted):\n// SLOWLY AND RAM KILLER\n\nnosql.sort('user.age > 10 && user.age < 30', function(a, b) {\n\tif (a.age < b.age)\n\t\treturn -1;\n\treturn 1;\n} function(users, count) {\t\n\tconsole.log(users);\n\tconsole.log('Total users:', count);\n}, userSkip, userTake);\n\n```\n\n## The MIT License\n\nCopyright (c) 2012-2013 Peter Širka <petersirka@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n## Recommend\n\n[partial.js web application framework](https://github.com/petersirka/partial.js)\n\n## Contact\n\n[www.petersirka.sk](http://www.petersirka.sk)\n",
  "bugs": {
    "url": "https://github.com/petersirka/nosql/issues"
  },
  "_id": "nosql@1.0.3-1",
  "dist": {
    "shasum": "f3e576afb420fdd789393c323d66dec38f3d0faa"
  },
  "_from": "nosql@latest",
  "_resolved": "https://registry.npmjs.org/nosql/-/nosql-1.0.3-1.tgz"
}
